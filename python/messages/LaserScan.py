"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

import messages

class LaserScan(object):

    __slots__ = ["timestamp", "num_points", "points"]

    __typenames__ = ["int64_t", "int32_t", "messages.ScanPoint"]

    __dimensions__ = [None, None, ["num_points"]]

    def __init__(self):
        self.timestamp = 0
        """ LCM Type: int64_t """
        self.num_points = 0
        """ LCM Type: int32_t """
        self.points = []
        """ LCM Type: messages.ScanPoint[num_points] """

    def encode(self):
        buf = BytesIO()
        buf.write(LaserScan._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qi", self.timestamp, self.num_points))
        for i0 in range(self.num_points):
            assert self.points[i0]._get_packed_fingerprint() == messages.ScanPoint._get_packed_fingerprint()
            self.points[i0]._encode_one(buf)

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != LaserScan._get_packed_fingerprint():
            raise ValueError("Decode error")
        return LaserScan._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = LaserScan()
        self.timestamp, self.num_points = struct.unpack(">qi", buf.read(12))
        self.points = []
        for i0 in range(self.num_points):
            self.points.append(messages.ScanPoint._decode_one(buf))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if LaserScan in parents: return 0
        newparents = parents + [LaserScan]
        tmphash = (0xec2742130c98cc76+ messages.ScanPoint._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if LaserScan._packed_fingerprint is None:
            LaserScan._packed_fingerprint = struct.pack(">Q", LaserScan._get_hash_recursive([]))
        return LaserScan._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", LaserScan._get_packed_fingerprint())[0]

